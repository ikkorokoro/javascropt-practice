// レキシカルスコープ
// コードを書く場所によって参照できる変数が変わるスコープのこと
// コードを書いた時点でスコープが決まるため静的スコープともいう

// スコープの確認方法
//ブラウザ -> 検証 -> sources -> fn1の行をクリックして,リロードし処理を止める -> Scopeを確認し、参照できる変数、関数を確認する -> step intoをクリックして処理を進めていく

// 下記のコードはfn2はfn1関数スコープ内(fn1の{}中のため)、関数fn2の中から変数bを呼び出すことができる(グローバルオブジェクトのaも呼び出すことは可能)
let a = 2;
function fn1() {
    let b = 1;
    function fn2() {
      let c = 3;
      console.log(b);
    }
    fn2();
}
fn1();

// 以下の場合、fn4の関数から変数fの呼び出しはfn4のスコープ外となるためとエラーが出る
let e = 2;
function fn3() {
    let f = 1;
}
fn3();

function fn4() {
  let g = 3;
  console.log(f);
}
fn4();

// まとめ
/* 
今回のコードで生成されたスコープ
グローバルスコープ
  a, fn1
関数スコープ(fn1)
  b,fn2
  関数スコープ(fn2)
    c
関数スコープ(fn1)は自身のスコープのb,fn2とグローバルスコープのa,b1を参照することができる
関数スコープ(fn2)は自身のスコープc,またfn1のスコープ内であるため、
fn1のb,fn2とグローバルスコープのa,f1の全てを参照することができる

関数スコープfn1や関数スコープfn2のように自身のスコープ外から変数を参照することができることを外部変数という

レキシカルスコープ
1, 実行中のコードから見た外部スコープのこと
2,どのようにしてスコープを決定するかの仕様のこと(どこに何を書くかによってスコープが決定するということ)
*/